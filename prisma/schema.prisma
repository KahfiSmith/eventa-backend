generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  username  String   @unique
  firstName String   @map("first_name")
  lastName  String   @map("last_name")
  password  String
  phone     String?
  avatar    String?
  bio       String?
  
  role        UserRole @default(ATTENDEE)
  isVerified  Boolean  @default(false) @map("is_verified")
  isActive    Boolean  @default(true) @map("is_active")
  
  location    String?
  latitude    Decimal? @db.Decimal(10, 8)
  longitude   Decimal? @db.Decimal(11, 8)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships
  createdEvents     Event[]           @relation("EventOrganizer")
  attendedEvents    EventAttendee[]
  tickets           Ticket[]
  payments          Payment[]
  notifications     Notification[]
  reviews           Review[]
  favorites         UserFavorite[]
  ownedVenues       Venue[]           @relation("VenueOwner")
  
  @@map("users")
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
  icon        String?
  color       String?
  isActive    Boolean @default(true) @map("is_active")
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships
  events Event[]
  
  @@map("categories")
}

model Venue {
  id          String  @id @default(uuid())
  name        String
  description String?
  address     String
  city        String
  state       String?
  country     String
  postalCode  String? @map("postal_code")
  
  latitude  Decimal @db.Decimal(10, 8)
  longitude Decimal @db.Decimal(11, 8)
  
  capacity     Int?
  facilities   String[] @default([])
  images       String[] @default([])
  contactEmail String?  @map("contact_email")
  contactPhone String?  @map("contact_phone")
  website      String?
  
  isActive Boolean @default(true) @map("is_active")
  
  ownerId String? @map("owner_id")
  owner   User?   @relation("VenueOwner", fields: [ownerId], references: [id])
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships
  events Event[]
  
  @@map("venues")
}

model Event {
  id          String      @id @default(uuid())
  title       String
  description String
  summary     String?
  
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  timezone  String   @default("UTC")
  
  isOnline    Boolean @default(false) @map("is_online")
  onlineUrl   String? @map("online_url")
  
  maxAttendees Int?     @map("max_attendees")
  minAge       Int?     @map("min_age")
  tags         String[] @default([])
  images       String[] @default([])
  
  status     EventStatus @default(DRAFT)
  visibility EventVisibility @default(PUBLIC)
  
  requiresApproval Boolean @default(false) @map("requires_approval")
  
  organizerId String @map("organizer_id")
  organizer   User   @relation("EventOrganizer", fields: [organizerId], references: [id])
  
  categoryId String   @map("category_id")
  category   Category @relation(fields: [categoryId], references: [id])
  
  venueId String? @map("venue_id")
  venue   Venue?  @relation(fields: [venueId], references: [id])
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships
  ticketTiers   TicketTier[]
  attendees     EventAttendee[]
  tickets       Ticket[]
  reviews       Review[]
  favorites     UserFavorite[]
  notifications Notification[]
  
  @@map("events")
}

model TicketTier {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  currency    String  @default("IDR")
  
  totalQuantity     Int @map("total_quantity")
  remainingQuantity Int @map("remaining_quantity")
  
  salesStartDate DateTime? @map("sales_start_date")
  salesEndDate   DateTime? @map("sales_end_date")
  
  maxPerUser Int? @map("max_per_user")
  
  isActive Boolean @default(true) @map("is_active")
  
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships
  tickets Ticket[]
  
  @@map("ticket_tiers")
}

model EventAttendee {
  id         String           @id @default(uuid())
  status     AttendeeStatus   @default(REGISTERED)
  registeredAt DateTime       @default(now()) @map("registered_at")
  
  userId  String @map("user_id")
  user    User   @relation(fields: [userId], references: [id])
  
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
  @@map("event_attendees")
}

model Ticket {
  id           String       @id @default(uuid())
  ticketNumber String       @unique @map("ticket_number")
  qrCode       String       @unique @map("qr_code")
  
  status       TicketStatus @default(ACTIVE)
  purchaseDate DateTime     @default(now()) @map("purchase_date")
  usedAt       DateTime?    @map("used_at")
  
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id])
  
  ticketTierId String     @map("ticket_tier_id")
  ticketTier   TicketTier @relation(fields: [ticketTierId], references: [id])
  
  paymentId String? @map("payment_id")
  payment   Payment? @relation(fields: [paymentId], references: [id])
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("tickets")
}

model Payment {
  id              String        @id @default(uuid())
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("IDR")
  status          PaymentStatus @default(PENDING)
  
  midtransOrderId String? @unique @map("midtrans_order_id")
  midtransTransactionId String? @unique @map("midtrans_transaction_id")
  
  paymentMethod   String? @map("payment_method")
  paymentChannel  String? @map("payment_channel")
  
  paidAt          DateTime? @map("paid_at")
  expiresAt       DateTime? @map("expires_at")
  
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relationships
  tickets Ticket[]
  
  @@map("payments")
}

model Review {
  id      String @id @default(uuid())
  rating  Int    @db.SmallInt
  comment String?
  
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id])
  
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@unique([userId, eventId])
  @@map("reviews")
}

model UserFavorite {
  id String @id @default(uuid())
  
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  eventId String @map("event_id")
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@unique([userId, eventId])
  @@map("user_favorites")
}

model Notification {
  id      String           @id @default(uuid())
  title   String
  message String
  type    NotificationType
  
  isRead Boolean @default(false) @map("is_read")
  
  userId String @map("user_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  eventId String? @map("event_id")
  event   Event?  @relation(fields: [eventId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("notifications")
}

// Enums
enum UserRole {
  ATTENDEE
  ORGANIZER
  VENUE_OWNER
  ADMIN
}

enum EventStatus {
  DRAFT
  PUBLISHED
  CANCELLED
  COMPLETED
}

enum EventVisibility {
  PUBLIC
  PRIVATE
  UNLISTED
}

enum AttendeeStatus {
  REGISTERED
  CONFIRMED
  CANCELLED
  NO_SHOW
  ATTENDED
}

enum TicketStatus {
  ACTIVE
  USED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
  REFUNDED
  EXPIRED
}

enum NotificationType {
  EVENT_REMINDER
  EVENT_UPDATE
  EVENT_CANCELLED
  PAYMENT_SUCCESS
  PAYMENT_FAILED
  TICKET_PURCHASED
  EVENT_CREATED
  REVIEW_REQUEST
}